%% Initialization code
function varargout = NacelleDesign(varargin)
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @NacelleDesign_OpeningFcn, ...
                   'gui_OutputFcn',  @NacelleDesign_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end
if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end

%% Opening function
function NacelleDesign_OpeningFcn(hObject, eventdata, handles, varargin)

% Set background image
h = axes('Units', 'Normalized', 'position', [0 0 1 1]);
uistack(h, 'bottom');
img = imread('graphics\nacelle.png');
imagesc(img);
set(h, 'HandleVisibility', 'off', 'visible','off')

% Get input
handles.Nacelle = varargin{1};
handles.Tower = varargin{2};
handles.Blade = varargin{3};
handles.Input = varargin(1);

% Update input fields
set(handles.Nacelle_Length_textbox, 'String', num2str(handles.Nacelle.Housing.Length));
set(handles.Nacelle_Diameter_textbox, 'String', num2str(handles.Nacelle.Housing.Diameter));
set(handles.NacelleType, 'Value', handles.Nacelle.Housing.Type);
set(handles.Nacelle_Mass_textbox, 'String', num2str(handles.Nacelle.Housing.Mass));
set(handles.Hub_Mass_textbox, 'String', num2str(handles.Nacelle.Hub.Mass));
set(handles.Hub_Overhang_textbox, 'String', num2str(handles.Nacelle.Hub.Overhang));
set(handles.HubType, 'Value', handles.Nacelle.Hub.Type);
set(handles.Shaft_Tilt_textbox, 'String', num2str(handles.Nacelle.Hub.ShaftTilt));
set(handles.Nosecone_Length_textbox, 'String', num2str(handles.Nacelle.Hub.Length));

% Update handles structure
guidata(hObject, handles);

% Halt window
uiwait(handles.NacelleDesign);

%% Closing function
function NacelleDesign_CloseRequestFcn(hObject, eventdata, handles)
button = questdlg('Save changes?');
if strcmp(button, 'Yes')
    handles.Save = true;
    guidata(hObject, handles);
    uiresume(hObject);
elseif strcmp(button, 'No')
    handles.Save = false;
    guidata(hObject, handles);
    uiresume(hObject);
end

%% Apply button
function Apply_Callback(hObject, eventdata, handles)
handles.Save = true;
guidata(hObject, handles);
uiresume(handles.NacelleDesign);

%% Cancel button
function Cancel_Callback(hObject, eventdata, handles)
handles.Save = false;
guidata(hObject, handles);
uiresume(handles.NacelleDesign);

%% Output function
function varargout = NacelleDesign_OutputFcn(hObject, eventdata, handles) 

% Set output
if handles.Save
    handles.Nacelle.Housing.Length = str2double(get(handles.Nacelle_Length_textbox, 'String'));
    handles.Nacelle.Housing.Diameter = str2double(get(handles.Nacelle_Diameter_textbox, 'String'));
    handles.Nacelle.Housing.Type = get(handles.NacelleType, 'Value');
    handles.Nacelle.Housing.Mass = str2double(get(handles.Nacelle_Mass_textbox, 'String'));
    handles.Nacelle.Hub.Mass = str2double(get(handles.Hub_Mass_textbox, 'String'));
    handles.Nacelle.Hub.Overhang = str2double(get(handles.Hub_Overhang_textbox, 'String'));
    handles.Nacelle.Hub.Type = get(handles.HubType, 'Value');
    handles.Nacelle.Hub.ShaftTilt = str2double(get(handles.Shaft_Tilt_textbox, 'String'));
    handles.Nacelle.Hub.Diameter = str2double(get(handles.Nosecone_Length_textbox, 'String'));
    varargout{1} = handles.Nacelle;
else
    varargout = handles.Input;
end

% Close figure
delete(hObject)

%% NacelleType length - text box
function Nacelle_Length_textbox_Callback(hObject, eventdata, handles)
if str2double(get(hObject,'String')) < 0
    set(hObject, 'String', '0')
elseif isnan(str2double(get(hObject,'String')))
    set(hObject, 'String', num2str(handles.Nacelle.Housing.Length))
end
handles.Nacelle.Housing.Length = str2double(get(hObject,'String'));
guidata(hObject, handles);
function Nacelle_Length_textbox_CreateFcn(hObject, eventdata, handles)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

%% NacelleType diameter - text box
function Nacelle_Diameter_textbox_Callback(hObject, eventdata, handles)
if str2double(get(hObject,'String')) < 0
    set(hObject, 'String', '0')
elseif isnan(str2double(get(hObject,'String')))
    set(hObject, 'String', num2str(handles.Nacelle.Housing.Diameter))
end
handles.Nacelle.Housing.Diameter = str2double(get(hObject,'String'));
guidata(hObject, handles);
function Nacelle_Diameter_textbox_CreateFcn(hObject, eventdata, handles)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

%% NacelleType type - dropdown
function NacelleType_Callback(hObject, eventdata, handles)
function NacelleType_CreateFcn(hObject, eventdata, handles)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

%% NacelleType mass - text box
function Nacelle_Mass_textbox_Callback(hObject, eventdata, handles)
if str2double(get(hObject,'String')) < 0
    set(hObject, 'String', '0')
elseif isnan(str2double(get(hObject,'String')))
    set(hObject, 'String', num2str(handles.Nacelle.Housing.Mass))
end
handles.Nacelle.Housing.Mass = str2double(get(hObject,'String'));
guidata(hObject, handles);
function Nacelle_Mass_textbox_CreateFcn(hObject, eventdata, handles)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

%% Hub mass - text box
function Hub_Mass_textbox_Callback(hObject, eventdata, handles)
if str2double(get(hObject,'String')) < 0
    set(hObject, 'String', '0')
elseif isnan(str2double(get(hObject,'String')))
    set(hObject, 'String', num2str(handles.Nacelle.Hub.Mass))
end
handles.Nacelle.Hub.Mass = str2double(get(hObject,'String'));
guidata(hObject, handles);
function Hub_Mass_textbox_CreateFcn(hObject, eventdata, handles)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

%% Hub overhang - text box
function Hub_Overhang_textbox_Callback(hObject, eventdata, handles)
if str2double(get(hObject,'String')) < 0
    set(hObject, 'String', '0')
elseif isnan(str2double(get(hObject,'String')))
    set(hObject, 'String', num2str(handles.Nacelle.Hub.Overhang))
end
handles.Nacelle.Hub.Overhang = str2double(get(hObject,'String'));
guidata(hObject, handles);
function Hub_Overhang_textbox_CreateFcn(hObject, eventdata, handles)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

%% Hub type - dropdown
function HubType_Callback(hObject, eventdata, handles)
function HubType_CreateFcn(hObject, eventdata, handles)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

%% Shaft tilt - text box
function Shaft_Tilt_textbox_Callback(hObject, eventdata, handles)
if isnan(str2double(get(hObject,'String')))
    set(hObject, 'String', num2str(handles.Nacelle.Hub.ShaftTilt))
end
handles.Nacelle.Hub.ShaftTilt = str2double(get(hObject,'String'));
guidata(hObject, handles);
function Shaft_Tilt_textbox_CreateFcn(hObject, eventdata, handles)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

%% Nose cone length - text box
function Nosecone_Length_textbox_Callback(hObject, eventdata, handles)
if str2double(get(hObject,'String')) < 0
    set(hObject, 'String', '0')
elseif isnan(str2double(get(hObject,'String')))
    set(hObject, 'String', num2str(handles.Nacelle.Hub.Length))
end
handles.Nacelle.Hub.Length = str2double(get(hObject,'String'));
guidata(hObject, handles);
function Nosecone_Length_textbox_CreateFcn(hObject, eventdata, handles)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

%% Plot geometry
function PlotButton_Callback(hObject, eventdata, handles)

% Extract geometry from input fields
Nacelle = handles.Nacelle;
Blade = handles.Blade;
Tower = handles.Tower;

% Color scheme
EdgeColor = 'none';
White = [240, 240, 240]/255;
Lightgrey = [174, 174, 174]/255;
Lightergrey = [200, 200, 200]/255;
Grey = [120, 120, 120]/255;
Yellow = [249, 178, 51]/255;

% Set axis
Plot = figure();
set(Plot, 'Name', 'Nacelle plot')
view(-45,180/pi*atan(sin(pi/4)))
light
lightangle(0, 45)
axis equal
axis off
hold on

N = 200 + 1;
t = Nacelle.Hub.ShaftTilt*pi/180;
Ry = [cos(t), 0, sin(t); ...
      0,      1, 0; ...
     -sin(t), 0, cos(t)];
if get(handles.NacelleType, 'Value') == 1
    
    x = [zeros(1,17); ones(1,17)] * Nacelle.Housing.Length - Nacelle.Hub.Overhang + 0.3 + 0.5*Blade.Chord(1);
    y = repmat([-1, -0.9, 0.9, 1, 1, 0.95, 0.95, 1, 1, 0.9, -0.9, -1, -1, -0.95, -0.95, -1, -1], [2,1]) * Nacelle.Housing.Diameter/2;
    z = repmat([0.9, 1, 1, 0.9, 0.1, 0.1, -0.1, -0.1, -0.9, -1, -1, -0.9, -0.1, -0.1, 0.1, 0.1, 0.9], [2,1]) * Nacelle.Housing.Diameter/2;
    x(2,:) = x(2,:) + 0.5*[0.9, 1, 1, 0.9, 0.1, 0.1, -0.1, -0.1, -0.9, -1, -1, -0.9, -0.1, -0.1, 0.1, 0.1, 0.9];
    z(2,:) = 7/8*z(2,:);
    A = [reshape(x,1,[]); reshape(y,1,[]); reshape(z,1,[])]; 
    A = Ry * A;
    x = reshape(A(1,:),size(x));
    y = reshape(A(2,:),size(x));
    z = reshape(A(3,:),size(z));
    surf(x,y,z, ...
        'FaceColor', White, ...
        'EdgeColor', EdgeColor, ...
        'AmbientStrength', 0.5, ...
        'DiffuseStrength', 0.5, ...
        'SpecularStrength', 0.5, ...
        'BackFaceLighting', 'reverselit')
    patch(x(1,:),y(1,:),z(1,:), 'g', ...
        'FaceColor', White, ...
        'EdgeColor', EdgeColor, ...
        'AmbientStrength', 0.5, ...
        'DiffuseStrength', 0.5, ...
        'SpecularStrength', 0.5, ...
        'BackFaceLighting', 'reverselit')
    patch(x(end,:),y(end,:),z(end,:), 'g', ...
        'FaceColor', White, ...
        'EdgeColor', EdgeColor, ...
        'AmbientStrength', 0.5, ...
        'DiffuseStrength', 0.5, ...
        'SpecularStrength', 0.5, ...
        'BackFaceLighting', 'reverselit')
    
    dx = - Nacelle.Hub.Overhang + 0.3 + 0.5*Blade.Chord(1) + 0.25*Nacelle.Housing.Length;
    dz = Nacelle.Housing.Diameter/2*0.9;
    vert = [[-1 1 1 -1 -1 1 1 -1] * 1/2 + dx; ...
            [-1 -1 1 1 -1 -1 1 1] * 1/2; ...
            [-1 -1 -1 -1 1 1 1 1] * 1/4];
    vert = Ry * vert;
    vert(3,:) = vert(3,:) + dz;
    faces = [1 2 6 5; 2 3 7 6; 3 4 8 7; 4 1 5 8; 1 2 3 4; 5 6 7 8];
    patch('Vertices', vert', 'Faces', faces, ...
        'FaceColor', Lightergrey, ...
        'EdgeColor', EdgeColor, ...
        'AmbientStrength', 0.5, ...
        'DiffuseStrength', 0.5, ...
        'SpecularStrength', 0.5, ...
        'BackFaceLighting', 'reverselit')
    vert = [[-1 1 1 -1 -1 1 1 -1] * 1/2 * 0.8 + dx; ...
            [-1 -1 1 1 -1 -1 1 1] * 1/2 * 0.8; ...
            [-1 -1 -1 -1 1 1 1 1] * 1/4];
    vert = Ry * vert;
    vert(3,:) = vert(3,:) + dz+0.01;
    faces = [1 2 6 5; 2 3 7 6; 3 4 8 7; 4 1 5 8; 1 2 3 4; 5 6 7 8];
    patch('Vertices', vert', 'Faces', faces, ...
        'FaceColor', White, ...
        'EdgeColor', EdgeColor, ...
        'AmbientStrength', 0.5, ...
        'DiffuseStrength', 0.5, ...
        'SpecularStrength', 0.5, ...
        'BackFaceLighting', 'reverselit')
    
    [x,y,z] = cylinder([1 0.9 0.9]*Nacelle.Housing.Diameter/2,N-1);
    z = z*0.3 - Nacelle.Hub.Overhang + 0.5*Blade.Chord(1);
    A = [reshape(z,1,[]); reshape(x,1,[]); reshape(y,1,[])]; 
    A = Ry * A;
    x = reshape(A(1,:),3,N);
    y = reshape(A(2,:),3,N);
    z = reshape(A(3,:),3,N);
    surf(x,y,z, ...
        'FaceColor', Grey, ...
        'EdgeColor', EdgeColor, ...
        'AmbientStrength', 0.5, ...
        'DiffuseStrength', 0.5, ...
        'SpecularStrength', 0.5, ...
        'BackFaceLighting', 'reverselit')
    
elseif get(handles.NacelleType, 'Value') == 2
    
    Nx = 50;
    R = Nacelle.Housing.Diameter/2;
    r = repmat(R*sin(linspace(0,pi/2,Nx)),[N,1]);
    azi = repmat(linspace(0,2*pi,N)',[1,Nx]);
    x = repmat(cos(linspace(0,pi/2,Nx)),[N,1]) * (Nacelle.Housing.Length-0.4) + 0.3 - Nacelle.Hub.Overhang  + 0.5*Blade.Chord(1);
    y = r.*cos(azi);
    z = r.*sin(azi);
    A = [reshape(x,1,[]); reshape(y,1,[]); reshape(z,1,[])]; 
    A = Ry * A;
    x = reshape(A(1,:),N,Nx);
    y = reshape(A(2,:),N,Nx);
    z = reshape(A(3,:),N,Nx);
    surf(x,y,z, ...
        'FaceColor', White, ...
        'EdgeColor', EdgeColor, ...
        'AmbientStrength', 0.5, ...
        'DiffuseStrength', 0.5, ...
        'SpecularStrength', 0.5, ...
        'BackFaceLighting', 'reverselit')
    
    dx = - Nacelle.Hub.Overhang + 0.3 + 0.5*Blade.Chord(1) + 1.5;
    dz = Nacelle.Housing.Diameter/2*0.9;
    vert = [[-1 1 1 -1 -1 1 1 -1] * 1/2 + dx; ...
            [-1 -1 1 1 -1 -1 1 1] * 1/2; ...
            [-1 -1 -1 -1 1 1 1 1] * 1/4];
    vert = Ry * vert;
    vert(3,:) = vert(3,:) + dz;
    faces = [1 2 6 5; 2 3 7 6; 3 4 8 7; 4 1 5 8; 1 2 3 4; 5 6 7 8];
    patch('Vertices', vert', 'Faces', faces, ...
        'FaceColor', Lightergrey, ...
        'EdgeColor', EdgeColor, ...
        'AmbientStrength', 0.5, ...
        'DiffuseStrength', 0.5, ...
        'SpecularStrength', 0.5, ...
        'BackFaceLighting', 'reverselit')
    vert = [[-1 1 1 -1 -1 1 1 -1] * 1/2 * 0.8 + dx; ...
            [-1 -1 1 1 -1 -1 1 1] * 1/2 * 0.8; ...
            [-1 -1 -1 -1 1 1 1 1] * 1/4];
    vert = Ry * vert;
    vert(3,:) = vert(3,:) + dz+0.01;
    faces = [1 2 6 5; 2 3 7 6; 3 4 8 7; 4 1 5 8; 1 2 3 4; 5 6 7 8];
    patch('Vertices', vert', 'Faces', faces, ...
        'FaceColor', White, ...
        'EdgeColor', EdgeColor, ...
        'AmbientStrength', 0.5, ...
        'DiffuseStrength', 0.5, ...
        'SpecularStrength', 0.5, ...
        'BackFaceLighting', 'reverselit')
    
    [x,y,z] = cylinder([1 0.9 0.9 1]*Nacelle.Housing.Diameter/2,N-1);
    z = z*0.3 - Nacelle.Hub.Overhang + 0.5*Blade.Chord(1);
    A = [reshape(z,1,[]); reshape(x,1,[]); reshape(y,1,[])]; 
    A = Ry * A;
    x = reshape(A(1,:),4,N);
    y = reshape(A(2,:),4,N);
    z = reshape(A(3,:),4,N);
    surf(x,y,z, ...
        'FaceColor', Grey, ...
        'EdgeColor', EdgeColor, ...
        'AmbientStrength', 0.5, ...
        'DiffuseStrength', 0.5, ...
        'SpecularStrength', 0.5, ...
        'BackFaceLighting', 'reverselit')

elseif get(handles.NacelleType, 'Value') == 3
    
    [x,y,z] = cylinder([1 2/3]*Nacelle.Housing.Diameter/2,N-1);
    z = z * (Nacelle.Housing.Length-0.4) + 0.3 - Nacelle.Hub.Overhang  + 0.5*Blade.Chord(1);
    A = [reshape(z,1,[]); reshape(x,1,[]); reshape(y,1,[])]; 
    A = Ry * A;
    x = reshape(A(1,:),2,N);
    y = reshape(A(2,:),2,N);
    z = reshape(A(3,:),2,N);
    surf(x,y,z, ...
        'FaceColor', White, ...
        'EdgeColor', EdgeColor, ...
        'AmbientStrength', 0.5, ...
        'DiffuseStrength', 0.5, ...
        'SpecularStrength', 0.5, ...
        'BackFaceLighting', 'reverselit')
    patch(x(end,:),y(end,:),z(end,:), 'g', ...
        'FaceColor', White, ...
        'EdgeColor', EdgeColor, ...
        'AmbientStrength', 0.5, ...
        'DiffuseStrength', 0.5, ...
        'SpecularStrength', 0.5, ...
        'BackFaceLighting', 'reverselit')
    
    dx = - Nacelle.Hub.Overhang + 0.3 + 0.5*Blade.Chord(1) + 0.25*Nacelle.Housing.Length;
    dz = Nacelle.Housing.Diameter/2*0.85;
    vert = [[-1 1 1 -1 -1 1 1 -1] * 1/2 + dx; ...
            [-1 -1 1 1 -1 -1 1 1] * 1/2; ...
            [-1 -1 -1 -1 1 1 1 1] * 1/4];
    vert = Ry * vert;
    vert(3,:) = vert(3,:) + dz;
    faces = [1 2 6 5; 2 3 7 6; 3 4 8 7; 4 1 5 8; 1 2 3 4; 5 6 7 8];
    patch('Vertices', vert', 'Faces', faces, ...
        'FaceColor', Lightergrey, ...
        'EdgeColor', EdgeColor, ...
        'AmbientStrength', 0.5, ...
        'DiffuseStrength', 0.5, ...
        'SpecularStrength', 0.5, ...
        'BackFaceLighting', 'reverselit')
    vert = [[-1 1 1 -1 -1 1 1 -1] * 1/2 * 0.8 + dx; ...
            [-1 -1 1 1 -1 -1 1 1] * 1/2 * 0.8; ...
            [-1 -1 -1 -1 1 1 1 1] * 1/4];
    vert = Ry * vert;
    vert(3,:) = vert(3,:) + dz+0.01;
    faces = [1 2 6 5; 2 3 7 6; 3 4 8 7; 4 1 5 8; 1 2 3 4; 5 6 7 8];
    patch('Vertices', vert', 'Faces', faces, ...
        'FaceColor', White, ...
        'EdgeColor', EdgeColor, ...
        'AmbientStrength', 0.5, ...
        'DiffuseStrength', 0.5, ...
        'SpecularStrength', 0.5, ...
        'BackFaceLighting', 'reverselit')
    
    [x,y,z] = cylinder([1 0.9 0.9 1]*Nacelle.Housing.Diameter/2,N-1);
    z = z*0.3 - Nacelle.Hub.Overhang + 0.5*Blade.Chord(1);
    A = [reshape(z,1,[]); reshape(x,1,[]); reshape(y,1,[])]; 
    A = Ry * A;
    x = reshape(A(1,:),4,N);
    y = reshape(A(2,:),4,N);
    z = reshape(A(3,:),4,N);
    surf(x,y,z, ...
        'FaceColor', Grey, ...
        'EdgeColor', EdgeColor, ...
        'AmbientStrength', 0.5, ...
        'DiffuseStrength', 0.5, ...
        'SpecularStrength', 0.5, ...
        'BackFaceLighting', 'reverselit')
    
elseif get(handles.NacelleType, 'Value') == 4
    
    [x,y,z] = cylinder([1 1]*Nacelle.Housing.Diameter/2,N-1);
    z = z * (Nacelle.Housing.Length-0.4) + 0.3 - Nacelle.Hub.Overhang  + 0.5*Blade.Chord(1);
    dx = max(z(:));
    A = [reshape(z,1,[]); reshape(x,1,[]); reshape(y,1,[])]; 
    A = Ry * A;
    x = reshape(A(1,:),2,N);
    y = reshape(A(2,:),2,N);
    z = reshape(A(3,:),2,N);
    surf(x,y,z, ...
        'FaceColor', White, ...
        'EdgeColor', EdgeColor, ...
        'AmbientStrength', 0.5, ...
        'DiffuseStrength', 0.5, ...
        'SpecularStrength', 0.5, ...
        'BackFaceLighting', 'reverselit')
    patch(x(1,:),y(1,:),z(1,:), 'g', ...
        'FaceColor', White, ...
        'EdgeColor', EdgeColor, ...
        'AmbientStrength', 0.5, ...
        'DiffuseStrength', 0.5, ...
        'SpecularStrength', 0.5, ...
        'BackFaceLighting', 'reverselit')
    patch(x(end,:),y(end,:),z(end,:), 'g', ...
        'FaceColor', White, ...
        'EdgeColor', EdgeColor, ...
        'AmbientStrength', 0.5, ...
        'DiffuseStrength', 0.5, ...
        'SpecularStrength', 0.5, ...
        'BackFaceLighting', 'reverselit')
    [x,y,z] = cylinder([1 1]*Tower.Diameter(end)/2,N-1);
    z = dx - z * dx;
    A = [reshape(z,1,[]); reshape(x,1,[]); reshape(y,1,[])]; 
    A = Ry * A;
    x = reshape(A(1,:),2,N);
    y = reshape(A(2,:),2,N);
    z = reshape(A(3,:),2,N);
    surf(x,y,z, ...
        'FaceColor', White, ...
        'EdgeColor', EdgeColor, ...
        'AmbientStrength', 0.5, ...
        'DiffuseStrength', 0.5, ...
        'SpecularStrength', 0.5, ...
        'BackFaceLighting', 'reverselit')
    [x,y,z] = sphere(N-1);
    x = x * Tower.Diameter(end)/2;
    y = y * Tower.Diameter(end)/2;
    z = z * Tower.Diameter(end)/2;
    surf(x,y,z, ...
        'FaceColor', White, ...
        'EdgeColor', EdgeColor, ...
        'AmbientStrength', 0.5, ...
        'DiffuseStrength', 0.5, ...
        'SpecularStrength', 0.5, ...
        'BackFaceLighting', 'reverselit')
    [x,y,z] = cylinder([1 0.9 0.9 1]*min(Blade.Chord(1), Tower.Diameter(end)/2),N-1);
    z = z*0.3 - Nacelle.Hub.Overhang + 0.5*Blade.Chord(1);
    A = [reshape(z,1,[]); reshape(x,1,[]); reshape(y,1,[])]; 
    A = Ry * A;
    x = reshape(A(1,:),4,N);
    y = reshape(A(2,:),4,N);
    z = reshape(A(3,:),4,N);
    surf(x,y,z, ...
        'FaceColor', Grey, ...
        'EdgeColor', EdgeColor, ...
        'AmbientStrength', 0.5, ...
        'DiffuseStrength', 0.5, ...
        'SpecularStrength', 0.5, ...
        'BackFaceLighting', 'reverselit')
    
elseif get(handles.NacelleType, 'Value') == 5
    
    x = [zeros(1,17); ones(1,17)] * Nacelle.Housing.Length - Nacelle.Hub.Overhang + 0.3 + 0.5*Blade.Chord(1);
    y = repmat([-1, -0.9, 0.9, 1, 1, 0.95, 0.95, 1, 1, 0.9, -0.9, -1, -1, -0.95, -0.95, -1, -1], [2,1]) * Nacelle.Housing.Diameter/2;
    z = repmat([0.9, 1, 1, 0.9, 0.1, 0.1, -0.1, -0.1, -0.9, -1, -1, -0.9, -0.1, -0.1, 0.1, 0.1, 0.9], [2,1]) * Nacelle.Housing.Diameter/2;
    x(2,:) = x(2,:) + 0.5*[0.9, 1, 1, 0.9, 0.1, 0.1, -0.1, -0.1, -0.9, -1, -1, -0.9, -0.1, -0.1, 0.1, 0.1, 0.9];
    z(2,:) = 7/8*z(2,:);
    A = [reshape(x,1,[]); reshape(y,1,[]); reshape(z,1,[])]; 
    A = Ry * A;
    x = reshape(A(1,:),size(x));
    y = reshape(A(2,:),size(x));
    z = reshape(A(3,:),size(z));
    surf(x,y,z, ...
        'FaceColor', White, ...
        'EdgeColor', EdgeColor, ...
        'AmbientStrength', 0.5, ...
        'DiffuseStrength', 0.5, ...
        'SpecularStrength', 0.5, ...
        'BackFaceLighting', 'reverselit')
    patch(x(1,:),y(1,:),z(1,:), 'g', ...
        'FaceColor', White, ...
        'EdgeColor', EdgeColor, ...
        'AmbientStrength', 0.5, ...
        'DiffuseStrength', 0.5, ...
        'SpecularStrength', 0.5, ...
        'BackFaceLighting', 'reverselit')
    patch(x(end,:),y(end,:),z(end,:), 'g', ...
        'FaceColor', White, ...
        'EdgeColor', EdgeColor, ...
        'AmbientStrength', 0.5, ...
        'DiffuseStrength', 0.5, ...
        'SpecularStrength', 0.5, ...
        'BackFaceLighting', 'reverselit')
    
    dx = - Nacelle.Hub.Overhang + 0.3 + 0.5*Blade.Chord(1) + 0.25*Nacelle.Housing.Length;
    dz = Nacelle.Housing.Diameter/2*0.9;
    vert = [[-1 1 1 -1 -1 1 1 -1] * 1/2 + dx; ...
            [-1 -1 1 1 -1 -1 1 1] * 1/2; ...
            [-1 -1 -1 -1 1 1 1 1] * 1/4];
    vert = Ry * vert;
    vert(3,:) = vert(3,:) + dz;
    faces = [1 2 6 5; 2 3 7 6; 3 4 8 7; 4 1 5 8; 1 2 3 4; 5 6 7 8];
    patch('Vertices', vert', 'Faces', faces, ...
        'FaceColor', Lightergrey, ...
        'EdgeColor', EdgeColor, ...
        'AmbientStrength', 0.5, ...
        'DiffuseStrength', 0.5, ...
        'SpecularStrength', 0.5, ...
        'BackFaceLighting', 'reverselit')
    vert = [[-1 1 1 -1 -1 1 1 -1] * 1/2 * 0.8 + dx; ...
            [-1 -1 1 1 -1 -1 1 1] * 1/2 * 0.8; ...
            [-1 -1 -1 -1 1 1 1 1] * 1/4];
    vert = Ry * vert;
    vert(3,:) = vert(3,:) + dz+0.01;
    faces = [1 2 6 5; 2 3 7 6; 3 4 8 7; 4 1 5 8; 1 2 3 4; 5 6 7 8];
    patch('Vertices', vert', 'Faces', faces, ...
        'FaceColor', White, ...
        'EdgeColor', EdgeColor, ...
        'AmbientStrength', 0.5, ...
        'DiffuseStrength', 0.5, ...
        'SpecularStrength', 0.5, ...
        'BackFaceLighting', 'reverselit')
    
    x = [0, 0, 2, 2, 2, 2, 0, 0; 2, 2, 3.5, 3.5, 3.5, 3.5, 2, 2] + 0.5*Nacelle.Housing.Length - Nacelle.Hub.Overhang + 0.3 + 0.5*Blade.Chord(1);
    y = [1, 1, 1, 0.9, -0.9, -1, -1, -1; 1, 1, 1, 0.9, -0.9, -1, -1, -1] * Nacelle.Housing.Diameter/2;
    z = [0.1, 0.1, 0.9, 1, 1, 0.9, 0.1, 0.1; 0.1, 0.1, 0.9, 1, 1, 0.9, 0.1, 0.1] * Nacelle.Housing.Diameter * 3/4;
    y(:,2:3) = y(:,2:3) + 0.25;
    y(:,6:7) = y(:,6:7) - 0.25;
    A = [reshape(x,1,[]); reshape(y,1,[]); reshape(z,1,[])]; 
    A = Ry * A;
    x = reshape(A(1,:),size(x));
    y = reshape(A(2,:),size(y));
    z = reshape(A(3,:),size(z));
    surf(x,y,z, ...
        'FaceColor', White, ...
        'EdgeColor', EdgeColor, ...
        'AmbientStrength', 0.5, ...
        'DiffuseStrength', 0.5, ...
        'SpecularStrength', 0.5, ...
        'BackFaceLighting', 'reverselit')
    x_ = [0, 0, 2, 2, 2, 2, 0, 0; 2, 2, 3.5, 3.5, 3.5, 3.5, 2, 2] + 0.5*Nacelle.Housing.Length - Nacelle.Hub.Overhang + 0.3 + 0.5*Blade.Chord(1);
    y_ = [1, 1, 1, 0.9, -0.9, -1, -1, -1; 1, 1, 1, 0.9, -0.9, -1, -1, -1] * Nacelle.Housing.Diameter/2 + 0.2*[0, -1, -1, -1, 1, 1, 1, 0; 0, -1, -1, -1, -1, 1, 1, 0];
    z_ = [0.1, 0.1, 0.9, 1, 1, 0.9, 0.1, 0.1; 0.1, 0.1, 0.9, 1, 1, 0.9, 0.1, 0.1] * Nacelle.Housing.Diameter * 3/4 + 0.2*[0, 0, -1, -1, -1, -1, 0, 0; 0, 0, -1, -1, -1, -1, 0, 0];
    y_(:,2:3) = y_(:,2:3) + 0.25;
    y_(:,6:7) = y_(:,6:7) - 0.25;
    A = [reshape(x_,1,[]); reshape(y_,1,[]); reshape(z_,1,[])]; 
    A = Ry * A;
    x_ = reshape(A(1,:),size(x_));
    y_ = reshape(A(2,:),size(y_));
    z_ = reshape(A(3,:),size(z_));
    surf(x_,y_,z_, ...
        'FaceColor', Lightgrey, ...
        'EdgeColor', EdgeColor, ...
        'AmbientStrength', 0.5, ...
        'DiffuseStrength', 0.5, ...
        'SpecularStrength', 0.5, ...
        'BackFaceLighting', 'reverselit')
    patch(...
        [x(1,:), flip(x_(1,:))], ...
        [y(1,:), flip(y_(1,:))], ...
        [z(1,:), flip(z_(1,:))], ...
        'g', 'FaceColor', White, ...
        'EdgeColor', EdgeColor, ...
        'AmbientStrength', 0.5, ...
        'DiffuseStrength', 0.5, ...
        'SpecularStrength', 0.5, ...
        'BackFaceLighting', 'reverselit')
    patch(...
        [x(end,:), flip(x_(end,:))], ...
        [y(end,:), flip(y_(end,:))], ...
        [z(end,:), flip(z_(end,:))], ...
        'g', 'FaceColor', White, ...
        'EdgeColor', EdgeColor, ...
        'AmbientStrength', 0.5, ...
        'DiffuseStrength', 0.5, ...
        'SpecularStrength', 0.5, ...
        'BackFaceLighting', 'reverselit')
    
    [x,y,z] = cylinder([1 0.9 0.9]*Nacelle.Housing.Diameter/2,N-1);
    z = z*0.3 - Nacelle.Hub.Overhang + 0.5*Blade.Chord(1);
    A = [reshape(z,1,[]); reshape(x,1,[]); reshape(y,1,[])]; 
    A = Ry * A;
    x = reshape(A(1,:),3,N);
    y = reshape(A(2,:),3,N);
    z = reshape(A(3,:),3,N);
    surf(x,y,z, ...
        'FaceColor', Grey, ...
        'EdgeColor', EdgeColor, ...
        'AmbientStrength', 0.5, ...
        'DiffuseStrength', 0.5, ...
        'SpecularStrength', 0.5, ...
        'BackFaceLighting', 'reverselit')
    
elseif get(handles.NacelleType, 'Value') == 6
    
    x = [zeros(1,17); ones(1,17)] * Nacelle.Housing.Length - Nacelle.Hub.Overhang + 0.3 + 0.5*Blade.Chord(1);
    y = repmat([-1, -0.9, 0.9, 1, 1, 0.95, 0.95, 1, 1, 0.9, -0.9, -1, -1, -0.95, -0.95, -1, -1], [2,1]) * Nacelle.Housing.Diameter/2;
    z = repmat([0.9, 1, 1, 0.9, 0.1, 0.1, -0.1, -0.1, -0.9, -1, -1, -0.9, -0.1, -0.1, 0.1, 0.1, 0.9], [2,1]) * Nacelle.Housing.Diameter/2;
    x(2,:) = x(2,:) + 0.5*[0.9, 1, 1, 0.9, 0.1, 0.1, -0.1, -0.1, -0.9, -1, -1, -0.9, -0.1, -0.1, 0.1, 0.1, 0.9];
    z(2,:) = 7/8*z(2,:);
    A = [reshape(x,1,[]); reshape(y,1,[]); reshape(z,1,[])]; 
    A = Ry * A;
    x = reshape(A(1,:),size(x));
    y = reshape(A(2,:),size(x));
    z = reshape(A(3,:),size(z));
    surf(x,y,z, ...
        'FaceColor', White, ...
        'EdgeColor', EdgeColor, ...
        'AmbientStrength', 0.5, ...
        'DiffuseStrength', 0.5, ...
        'SpecularStrength', 0.5, ...
        'BackFaceLighting', 'reverselit')
    patch(x(1,:),y(1,:),z(1,:), 'g', ...
        'FaceColor', White, ...
        'EdgeColor', EdgeColor, ...
        'AmbientStrength', 0.5, ...
        'DiffuseStrength', 0.5, ...
        'SpecularStrength', 0.5, ...
        'BackFaceLighting', 'reverselit')
    patch(x(end,:),y(end,:),z(end,:), 'g', ...
        'FaceColor', White, ...
        'EdgeColor', EdgeColor, ...
        'AmbientStrength', 0.5, ...
        'DiffuseStrength', 0.5, ...
        'SpecularStrength', 0.5, ...
        'BackFaceLighting', 'reverselit')
    
    dx = - Nacelle.Hub.Overhang + 0.3 + 0.5*Blade.Chord(1) + 0.25*Nacelle.Housing.Length;
    dz = Nacelle.Housing.Diameter/2*0.9;
    vert = [[-1 1 1 -1 -1 1 1 -1] * 1/2 + dx; ...
            [-1 -1 1 1 -1 -1 1 1] * 1/2; ...
            [-1 -1 -1 -1 1 1 1 1] * 1/4];
    vert = Ry * vert;
    vert(3,:) = vert(3,:) + dz;
    faces = [1 2 6 5; 2 3 7 6; 3 4 8 7; 4 1 5 8; 1 2 3 4; 5 6 7 8];
    patch('Vertices', vert', 'Faces', faces, ...
        'FaceColor', Lightergrey, ...
        'EdgeColor', EdgeColor, ...
        'AmbientStrength', 0.5, ...
        'DiffuseStrength', 0.5, ...
        'SpecularStrength', 0.5, ...
        'BackFaceLighting', 'reverselit')
    vert = [[-1 1 1 -1 -1 1 1 -1] * 1/2 * 0.8 + dx; ...
            [-1 -1 1 1 -1 -1 1 1] * 1/2 * 0.8; ...
            [-1 -1 -1 -1 1 1 1 1] * 1/4];
    vert = Ry * vert;
    vert(3,:) = vert(3,:) + dz+0.01;
    faces = [1 2 6 5; 2 3 7 6; 3 4 8 7; 4 1 5 8; 1 2 3 4; 5 6 7 8];
    patch('Vertices', vert', 'Faces', faces, ...
        'FaceColor', White, ...
        'EdgeColor', EdgeColor, ...
        'AmbientStrength', 0.5, ...
        'DiffuseStrength', 0.5, ...
        'SpecularStrength', 0.5, ...
        'BackFaceLighting', 'reverselit')
    
    dx = - Nacelle.Hub.Overhang + 0.3 + 0.5*Blade.Chord(1) + (Nacelle.Housing.Length-1.5);
    dz = 0.5 + Nacelle.Housing.Diameter/2*0.9;
    vert = [[-1 1 1 -1 -1 1 1 -1] * 2 + dx*cos(t); ...
            [-1 -1 1 1 -1 -1 1 1] * 3/2; ...
            [-1 -1 -1 -1 0 0 0 0] * 0.25 + dz - dx*sin(t)];
    faces = [1 2 6 5; 2 3 7 6; 3 4 8 7; 4 1 5 8; 1 2 3 4; 5 6 7 8];
    patch('Vertices', vert', 'Faces', faces, ...
        'FaceColor', Lightgrey, ...
        'EdgeColor', EdgeColor, ...
        'AmbientStrength', 0.5, ...
        'DiffuseStrength', 0.5, ...
        'SpecularStrength', 0.5, ...
        'BackFaceLighting', 'reverselit')
    x = repmat([-1, 1, 1, -1, -1] * 2 + dx*cos(t), [2,1]);
    y = repmat([1, 1, -1, -1, 1] * 3/2, [2,1]);
    z = [zeros(1,5); ones(1,5)] * 0.25 + dz - dx*sin(t);
    surf(x,y,z, ...
        'FaceColor', Lightgrey, ...
        'EdgeColor', EdgeColor, ...
        'AmbientStrength', 0.5, ...
        'DiffuseStrength', 0.5, ...
        'SpecularStrength', 0.5, ...
        'BackFaceLighting', 'reverselit')
    [x,y,z] = cylinder(0.1,12);
    x = x + dx*cos(t);
    z = -z - 0.25 + dz  - dx*sin(t);
    for i = [-1, 1]
        for j = [-1, 1]
            surf(x+i,y+j,z, ...
                'FaceColor', Grey, ...
                'EdgeColor', EdgeColor, ...
                'AmbientStrength', 0.5, ...
                'DiffuseStrength', 0.5, ...
                'SpecularStrength', 0.5, ...
                'BackFaceLighting', 'reverselit')
        end
    end
    
    [x,y,z] = cylinder([1 0.9 0.9]*Nacelle.Housing.Diameter/2,N-1);
    z = z*0.3 - Nacelle.Hub.Overhang + 0.5*Blade.Chord(1);
    A = [reshape(z,1,[]); reshape(x,1,[]); reshape(y,1,[])]; 
    A = Ry * A;
    x = reshape(A(1,:),3,N);
    y = reshape(A(2,:),3,N);
    z = reshape(A(3,:),3,N);
    surf(x,y,z, ...
        'FaceColor', Grey, ...
        'EdgeColor', EdgeColor, ...
        'AmbientStrength', 0.5, ...
        'DiffuseStrength', 0.5, ...
        'SpecularStrength', 0.5, ...
        'BackFaceLighting', 'reverselit')
    
elseif get(handles.NacelleType, 'Value') == 7

    x = [zeros(1,17); ones(1,17)] * Nacelle.Housing.Length - Nacelle.Hub.Overhang + 0.3 + 0.5*Blade.Chord(1);
    y = repmat([-1, -0.9, 0.9, 1, 1, 0.95, 0.95, 1, 1, 0.9, -0.9, -1, -1, -0.95, -0.95, -1, -1], [2,1]) * Nacelle.Housing.Diameter/2;
    z = repmat([0.9, 1, 1, 0.9, 0.1, 0.1, -0.1, -0.1, -0.9, -1, -1, -0.9, -0.1, -0.1, 0.1, 0.1, 0.9], [2,1]) * Nacelle.Housing.Diameter/2;
    x(2,:) = x(2,:) + 0.5*[0.9, 1, 1, 0.9, 0.1, 0.1, -0.1, -0.1, -0.9, -1, -1, -0.9, -0.1, -0.1, 0.1, 0.1, 0.9];
    z(2,:) = 7/8*z(2,:);
    A = [reshape(x,1,[]); reshape(y,1,[]); reshape(z,1,[])]; 
    A = Ry * A;
    x = reshape(A(1,:),size(x));
    y = reshape(A(2,:),size(x));
    z = reshape(A(3,:),size(z));
    z(2,[1,4,17]) = 0.9*Nacelle.Housing.Diameter/2;
    z(2,2:3) = Nacelle.Housing.Diameter/2;
    surf(x,y,z, ...
        'FaceColor', White, ...
        'EdgeColor', EdgeColor, ...
        'AmbientStrength', 0.5, ...
        'DiffuseStrength', 0.5, ...
        'SpecularStrength', 0.5, ...
        'BackFaceLighting', 'reverselit')
    patch(x(1,:),y(1,:),z(1,:), 'g', ...
        'FaceColor', White, ...
        'EdgeColor', EdgeColor, ...
        'AmbientStrength', 0.5, ...
        'DiffuseStrength', 0.5, ...
        'SpecularStrength', 0.5, ...
        'BackFaceLighting', 'reverselit')
    patch(x(end,:),y(end,:),z(end,:), 'g', ...
        'FaceColor', White, ...
        'EdgeColor', EdgeColor, ...
        'AmbientStrength', 0.5, ...
        'DiffuseStrength', 0.5, ...
        'SpecularStrength', 0.5, ...
        'BackFaceLighting', 'reverselit')
    x = [-1-sqrt(2), -1, 1, 1+sqrt(2), 1+sqrt(2), 1, -1, -1-sqrt(2), -1-sqrt(2)] + 1+sqrt(2);
    y = [1, 1+sqrt(2), 1+sqrt(2), 1, -1, -1-sqrt(2), -1-sqrt(2), -1, 1];
    x = repmat(x,[2,1])*2.5 - Nacelle.Hub.Overhang + 0.3 + 0.5*Blade.Chord(1) + 1;
    y = repmat(y,[2,1])*2.5;
    z = [zeros(1,9); ones(1,9)]*0.5 + Nacelle.Housing.Diameter/2;
    surf(x,y,z, ...
        'FaceColor', Grey, ...
        'EdgeColor', EdgeColor, ...
        'AmbientStrength', 0.5, ...
        'DiffuseStrength', 0.5, ...
        'SpecularStrength', 0.5, ...
        'BackFaceLighting', 'reverselit')
    patch(x(1,:),y(1,:),z(1,:), 'g', ...
        'FaceColor', Grey, ...
        'EdgeColor', EdgeColor, ...
        'AmbientStrength', 0.5, ...
        'DiffuseStrength', 0.5, ...
        'SpecularStrength', 0.5, ...
        'BackFaceLighting', 'reverselit')
    patch(x(end,:),y(end,:),z(end,:), 'g', ...
        'FaceColor', Grey, ...
        'EdgeColor', EdgeColor, ...
        'AmbientStrength', 0.5, ...
        'DiffuseStrength', 0.5, ...
        'SpecularStrength', 0.5, ...
        'BackFaceLighting', 'reverselit')
    dx = - Nacelle.Hub.Overhang + 0.3 + 0.5*Blade.Chord(1) + 1 + (1+sqrt(2))*2.5;
    x = ([0, 0, 0, 0; 1, 1, 1, 1] - 0.5) * 0.5 + dx;
    y = [0, 1, 0, 0; 0, 1, 0, 0];
    z = [-1, 0, 0, -1; -1, 0, 0, -1] + Nacelle.Housing.Diameter/2;
    if Nacelle.Housing.Diameter < 10
        for i = [-1 1]
            for j = [-1 1]
                surf(x + 1.5*i,y*j + Nacelle.Housing.Diameter/2*j,z, ...
                    'FaceColor', Lightgrey, ...
                    'EdgeColor', EdgeColor, ...
                    'AmbientStrength', 0.5, ...
                    'DiffuseStrength', 0.5, ...
                    'SpecularStrength', 0.5, ...
                    'BackFaceLighting', 'reverselit')
            end
        end
    end
    h = 0.75;
    q = linspace(0,2*pi,25);
    x = [(5+2/3*h)*cos(q); 5*cos(q)];
    y = [(5+2/3*h)*sin(q); 5*sin(q)];
    z = zeros(size(x));
    x = x + dx;
    z = z+0.01 + 0.5 + Nacelle.Housing.Diameter/2;
    surf(x,y,z, ...
        'FaceColor', Yellow, ...
        'EdgeColor', EdgeColor, ...
        'AmbientStrength', 0.5, ...
        'DiffuseStrength', 0.5, ...
        'SpecularStrength', 0.5, ...
        'BackFaceLighting', 'reverselit')
    x = [1, 1, 0, 0, 1, 1, -1, -1, 0, 0, -1, -1, 1]*2 + [0, 0, h/2, h/2, 0, 0, 0, 0, -h/2, -h/2, 0, 0, 0];
    y = [-1, -1, -1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1]*2 + [0, h, h, -h, -h, 0, 0, -h, -h, h, h, 0, 0];
    z = zeros(size(x));
    x = x + dx;
    z = z+0.01 + 0.5 + Nacelle.Housing.Diameter/2;
    patch(x,y,z, 'g', ...
        'FaceColor', Yellow, ...
        'EdgeColor', EdgeColor, ...
        'AmbientStrength', 0.5, ...
        'DiffuseStrength', 0.5, ...
        'SpecularStrength', 0.5, ...
        'BackFaceLighting', 'reverselit')
    
    [x,y,z] = cylinder([1 0.9 0.9]*Nacelle.Housing.Diameter/2,N-1);
    z = z*0.3 - Nacelle.Hub.Overhang + 0.5*Blade.Chord(1);
    A = [reshape(z,1,[]); reshape(x,1,[]); reshape(y,1,[])]; 
    A = Ry * A;
    x = reshape(A(1,:),3,N);
    y = reshape(A(2,:),3,N);
    z = reshape(A(3,:),3,N);
    surf(x,y,z, ...
        'FaceColor', Grey, ...
        'EdgeColor', EdgeColor, ...
        'AmbientStrength', 0.5, ...
        'DiffuseStrength', 0.5, ...
        'SpecularStrength', 0.5, ...
        'BackFaceLighting', 'reverselit')
    
end

% Plot nose cone
if get(handles.NacelleType, 'Value') == 4
    R = min(Blade.Chord(1)*3/4, Tower.Diameter(end)/2);
else
    R = Nacelle.Housing.Diameter/2;
end
if get(handles.HubType, 'Value') == 1
    
    Nx = 50;
    r = repmat(R*sin(linspace(0,pi/2,Nx)),[N,1]);
    azi = repmat(linspace(0,2*pi,N)',[1,Nx]);
    x = 0.5*Blade.Chord(1) - repmat(cos(linspace(0,pi/2,Nx)),[N,1])*Nacelle.Hub.Length - Nacelle.Hub.Overhang;
    y = r.*cos(azi);
    z = r.*sin(azi);

elseif get(handles.HubType, 'Value') == 2
    
    Nx = 4;
    [x_,y_,z_] = cylinder([1, 0.99]*R,N-1);
    x = z_'; y = x_'; z = y_';
    x = [x * 0.9, x(:,end), x(:,end)];
    y = [y, y(:,end) * 0.9, y(:,end) * 0];
    z = [z, z(:,end) * 0.9, z(:,end) * 0];
    x = 0.5*Blade.Chord(1) - x*Nacelle.Hub.Length - Nacelle.Hub.Overhang;

elseif get(handles.HubType, 'Value') == 3
    
    Nx = 3;
    [x_,y_,z_] = cylinder([1, 0.99]*R,N-1);
    x = z_'; y = x_'; z = y_';
    x = [x*0.5*Blade.Chord(1)/Nacelle.Hub.Length, x(:,end)];
    y = [y, y(:,end) * 0];
    z = [z, z(:,end) * 0];
    x = 0.5*Blade.Chord(1) - x*Nacelle.Hub.Length - Nacelle.Hub.Overhang;

elseif get(handles.HubType, 'Value') == 4
    
    Nx = 50;
    rho = (R^2 + Nacelle.Hub.Length^2)/(2*R);
    x = linspace(0,Nacelle.Hub.Length,Nx);
    r = repmat(sqrt(rho^2 - (Nacelle.Hub.Length-x).^2) + R - rho,[N,1]);
    azi = repmat(linspace(0,2*pi,N)',[1,Nx]);
    x = repmat(x-Nacelle.Hub.Length,[N,1]) + 0.5*Blade.Chord(1) - Nacelle.Hub.Overhang;
    y = r.*cos(azi);
    z = r.*sin(azi);
    
end
A = [reshape(x,1,[]); reshape(y,1,[]); reshape(z,1,[])]; 
A = Ry * A;
x = reshape(A(1,:),N,Nx);
y = reshape(A(2,:),N,Nx);
z = reshape(A(3,:),N,Nx);
surf(x,y,z, ...
    'FaceColor', Lightergrey, ...
    'EdgeColor', EdgeColor, ...
    'AmbientStrength', 0.5, ...
    'DiffuseStrength', 0.5, ...
    'SpecularStrength', 0.5, ...
    'BackFaceLighting', 'reverselit')

% Plot blades
o = 2*pi/Blade.Number;
t = Nacelle.Hub.ShaftTilt*pi/180;
Ry = [cos(t), 0, sin(t); ...
      0,      1, 0; ...
     -sin(t), 0, cos(t)];
c = -Blade.Cone*pi/180;
Rc = [cos(c), 0, sin(c); ...
      0,      1, 0; ...
     -sin(c), 0, cos(c)];
if Blade.Number == 1
    do = pi/2;
else
    do = pi - pi/Blade.Number;
end
for B = 1:Blade.Number
    Rx = [1, 0,      0; ...
          0, cos(B*o + do),-sin(B*o + do); ...
          0, sin(B*o + do), cos(B*o + do)];
    [x,y,z] = cylinder(Blade.Chord(1)/2,400);
    z = z*(R+1/3);
    A = [reshape(x,1,[]); reshape(y,1,[]); reshape(z,1,[])];
    A = Rc * A;
    A(1,:) = A(1,:) - Nacelle.Hub.Overhang;
    A = Ry * Rx * A;
    N = size(x);
    x = reshape(A(1,:),N);
    y = reshape(A(2,:),N);
    z = reshape(A(3,:),N);
    surf(x,y,z, ...
        'FaceColor', White, ...
        'EdgeColor', EdgeColor, ...
        'AmbientStrength', 0.5, ...
        'DiffuseStrength', 0.5, ...
        'SpecularStrength', 0.5, ...
        'BackFaceLighting', 'reverselit');
    
    [x_,y_,z_] = cylinder(0.8*Blade.Chord(1)/2,400);
    z_ = R + z_*1/3;
    if get(handles.HubType, 'Value') == 2
        z_(1,:) = z_(1,:) + 0.1;
    end
    A = [reshape(x_,1,[]); reshape(y_,1,[]); reshape(z_,1,[])];
    A = Rc * A;
    A(1,:) = A(1,:) - Nacelle.Hub.Overhang;
    A = Ry * Rx * A;
    N = size(x_);
    x_ = reshape(A(1,:),N);
    y_ = reshape(A(2,:),N);
    z_ = reshape(A(3,:),N);
    surf(x_,y_,z_, ...
        'FaceColor', White, ...
        'EdgeColor', EdgeColor, ...
        'AmbientStrength', 0.5, ...
        'DiffuseStrength', 0.5, ...
        'SpecularStrength', 0.5, ...
        'BackFaceLighting', 'reverselit');
    
    patch(...
        [x(end,:), flip(x_(end,:))], ...
        [y(end,:), flip(y_(end,:))], ...
        [z(end,:), flip(z_(end,:))], ...
        'g', 'FaceColor', Lightergrey, ...
        'EdgeColor', EdgeColor, ...
        'AmbientStrength', 0.5, ...
        'DiffuseStrength', 0.5, ...
        'SpecularStrength', 0.5, ...
        'BackFaceLighting', 'reverselit')
    
    patch(...
        x_(1,:), ...
        y_(1,:), ...
        z_(1,:), ...
        'g', 'FaceColor', Lightgrey, ...
        'EdgeColor', EdgeColor, ...
        'AmbientStrength', 0.5, ...
        'DiffuseStrength', 0.5, ...
        'SpecularStrength', 0.5, ...
        'BackFaceLighting', 'reverselit')
    
    R_ = 0.9/2*Blade.Chord(1);
    r = 0.05/2*Blade.Chord(1);
    [x_,y_,z_] = cylinder([r r],12);
    for q = pi/15:pi/15:2*pi
        x = x_ + R_*cos(q);
        y = y_ + R_*sin(q);
        z = 0.3*z_ + R + 1/3;
        A = [reshape(x,1,[]); reshape(y,1,[]); reshape(z,1,[])];
        A = Rc * A;
        A(1,:) = A(1,:) - Nacelle.Hub.Overhang;
        A = Ry * Rx * A;
        N = size(x_);
        x = reshape(A(1,:),N);
        y = reshape(A(2,:),N);
        z = reshape(A(3,:),N);
        surf(x,y,z, ...
            'FaceColor', Grey, ...
            'EdgeColor', EdgeColor, ...
            'AmbientStrength', 0.5, ...
            'DiffuseStrength', 0.5, ...
            'SpecularStrength', 0.5, ...
            'BackFaceLighting', 'reverselit')
        patch(x(end,:), y(end,:), z(end,:), ...
            'g', 'FaceColor', Grey, ...
            'EdgeColor', EdgeColor, ...
            'AmbientStrength', 0.5, ...
            'DiffuseStrength', 0.5, ...
            'SpecularStrength', 0.5, ...
            'BackFaceLighting', 'reverselit')
    end
    
end

if Blade.Number == 1
    
    c = Blade.Cone*pi/180;
    Rc = [cos(c), 0, sin(c); ...
          0,      1, 0; ...
         -sin(c), 0, cos(c)];
    do = do + pi;
    Rx = [1, 0,      0; ...
          0, cos(B*o + do),-sin(B*o + do); ...
          0, sin(B*o + do), cos(B*o + do)];
    [x,y,z] = cylinder(Blade.Chord(1)/2*2/3,400);
    z = z*(R+1/3);
    A = [reshape(x,1,[]); reshape(y,1,[]); reshape(z,1,[])];
    A = Rc * A;
    A(1,:) = A(1,:) - Nacelle.Hub.Overhang;
    A = Ry * Rx * A;
    N = size(x);
    x = reshape(A(1,:),N);
    y = reshape(A(2,:),N);
    z = reshape(A(3,:),N);
    surf(x,y,z, ...
        'FaceColor', White, ...
        'EdgeColor', EdgeColor, ...
        'AmbientStrength', 0.5, ...
        'DiffuseStrength', 0.5, ...
        'SpecularStrength', 0.5, ...
        'BackFaceLighting', 'reverselit');
    
    [x_,y_,z_] = cylinder(0.8*Blade.Chord(1)/2*2/3,400);
    z_ = z_*1/3 + R;
    if get(handles.HubType, 'Value') == 2
        z_(1,:) = z_(1,:) + 0.1;
    end
    A = [reshape(x_,1,[]); reshape(y_,1,[]); reshape(z_,1,[])];
    A = Rc * A;
    A(1,:) = A(1,:) - Nacelle.Hub.Overhang;
    A = Ry * Rx * A;
    N = size(x_);
    x_ = reshape(A(1,:),N);
    y_ = reshape(A(2,:),N);
    z_ = reshape(A(3,:),N);
    surf(x_,y_,z_, ...
        'FaceColor', White, ...
        'EdgeColor', EdgeColor, ...
        'AmbientStrength', 0.5, ...
        'DiffuseStrength', 0.5, ...
        'SpecularStrength', 0.5, ...
        'BackFaceLighting', 'reverselit');
    
    patch(...
        [x(end,:), flip(x_(end,:))], ...
        [y(end,:), flip(y_(end,:))], ...
        [z(end,:), flip(z_(end,:))], ...
        'g', 'FaceColor', Lightergrey, ...
        'EdgeColor', EdgeColor, ...
        'AmbientStrength', 0.5, ...
        'DiffuseStrength', 0.5, ...
        'SpecularStrength', 0.5, ...
        'BackFaceLighting', 'reverselit')
    
    patch(...
        x_(1,:), ...
        y_(1,:), ...
        z_(1,:), ...
        'g', 'FaceColor', Lightgrey, ...
        'EdgeColor', EdgeColor, ...
        'AmbientStrength', 0.5, ...
        'DiffuseStrength', 0.5, ...
        'SpecularStrength', 0.5, ...
        'BackFaceLighting', 'reverselit')
    
    R_ = 0.9/2*Blade.Chord(1) * 2/3;
    r = 0.05/2*Blade.Chord(1) * 2/3;
    [x_,y_,z_] = cylinder([r r],12);
    for q = pi/15:pi/15:2*pi
        x = x_ + R_*cos(q);
        y = y_ + R_*sin(q);
        z = 0.3*z_ + R + 1/3;
        A = [reshape(x,1,[]); reshape(y,1,[]); reshape(z,1,[])];
        A = Rc * A;
        A(1,:) = A(1,:) - Nacelle.Hub.Overhang;
        A = Ry * Rx * A;
        N = size(x_);
        x = reshape(A(1,:),N);
        y = reshape(A(2,:),N);
        z = reshape(A(3,:),N);
        surf(x,y,z, ...
            'FaceColor', Grey, ...
            'EdgeColor', EdgeColor, ...
            'AmbientStrength', 0.5, ...
            'DiffuseStrength', 0.5, ...
            'SpecularStrength', 0.5, ...
            'BackFaceLighting', 'reverselit')
        patch(x(1,:), y(1,:), z(1,:), ...
            'g', 'FaceColor', Grey, ...
            'EdgeColor', EdgeColor, ...
            'AmbientStrength', 0.5, ...
            'DiffuseStrength', 0.5, ...
            'SpecularStrength', 0.5, ...
            'BackFaceLighting', 'reverselit')
    end
    
end

% Tower
[x,y,z] = cylinder(Tower.Diameter(end)/2,400);
z = -z*(Nacelle.Housing.Diameter/2 + 1);
surf(x,y,z, ...
    'FaceColor', White, ...
    'EdgeColor', EdgeColor, ...
    'AmbientStrength', 0.5, ...
    'DiffuseStrength', 0.5, ...
    'SpecularStrength', 0.5, ...
    'BackFaceLighting', 'reverselit');

[x_,y_,z_] = cylinder(0.95*Tower.Diameter(end)/2,400);
z_ = -z_*(Nacelle.Housing.Diameter/2 + 1);
surf(x_,y_,z_, ...
    'FaceColor', White, ...
    'EdgeColor', EdgeColor, ...
    'AmbientStrength', 0.5, ...
    'DiffuseStrength', 0.5, ...
    'SpecularStrength', 0.5, ...
    'BackFaceLighting', 'reverselit');

patch(...
    [x(end,:), flip(x_(end,:))], ...
    [y(end,:), flip(y_(end,:))], ...
    [z(end,:), flip(z_(end,:))], ...
    'g', 'FaceColor', Lightergrey, ...
    'EdgeColor', EdgeColor, ...
    'AmbientStrength', 0.5, ...
    'DiffuseStrength', 0.5, ...
    'SpecularStrength', 0.5, ...
    'BackFaceLighting', 'reverselit')

patch(x_(end,:), y_(end,:), z_(end,:) + 2/3, ...
    'g', 'FaceColor', Lightgrey, ...
    'EdgeColor', EdgeColor, ...
    'AmbientStrength', 0.5, ...
    'DiffuseStrength', 0.5, ...
    'SpecularStrength', 0.5, ...
    'BackFaceLighting', 'reverselit')
